package com.example.securitynew.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.FormLoginBeanDefinitionParser;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class securityconfig   {
	
	@Bean
	public PasswordEncoder passwordEncoder()
	{
		return new BCryptPasswordEncoder();
	}
	
	
	
	@Bean
	public UserDetailsService userDetailsService()
	{
		UserDetails userDetails=User
				.withUsername("vinit").password(passwordEncoder().encode("vinit"))
				.roles("NORMAL")
				.build();
		
		UserDetails admin=User
				.withUsername("admin").password(passwordEncoder().encode("admin"))
				.roles("ADMIN")
				.build();
		
		return  new InMemoryUserDetailsManager(userDetails,admin);
	
		
	}
	
	
	@SuppressWarnings("deprecation")
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception
	{
		httpSecurity.csrf().disable().
		authorizeHttpRequests()
		
		.requestMatchers("/home/adminuser").hasRole("ADMIN").requestMatchers("/home/normaluser")
		.hasRole("NORMAL")
            .requestMatchers("/home/publicuser")
            .permitAll().anyRequest()
           .authenticated().and().formLogin();
		
		
		return httpSecurity.build();
		
	}

}
